# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t6NyagndOiMMC9G3_LaXy3W3SgvCqNXr
"""

import tensorflow as tf
 
# Helper libraries
import numpy as np
import matplotlib.pyplot as plt
 
print(tf.__version__)

mnist = tf.keras.datasets.mnist
 
(train_images,train_labels),(test_images, test_labels)=mnist.load_data()

class_names = ['0','1','2','3','4','5','6','7','8','9']

# Explore the training data as follows:
print(train_images.shape)
len(train_labels)

# Explore the test data as follows:
print(test_images.shape)
len(test_labels)

# Visualise an image from the training dataset as follows:
plt.figure()
plt.imshow(train_images[2])
plt.colorbar()
plt.grid(False)
plt.show()

train_images = train_images / 255.0
test_images = test_images / 255.0

# Visualise an image from the training dataset as follows:
plt.figure(figsize = (10,10))
for i in range(25):
  plt.subplot(5,5,i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(train_images[i],cmap = plt.cm.binary)
  plt.xlabel(class_names[train_labels[i]])
plt.show()

model = tf.keras.Sequential([tf.keras.layers.Flatten(input_shape= (28,28)),
                     tf.keras.layers.Dense(128, activation= 'relu'),
                     tf.keras.layers.Dense(128 , activation = "relu"),
    tf.keras.layers.Dense(10)])

model.compile(optimizer = 'sgd',
              loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits= True),
              metrics = ['accuracy'])

# Feed the model and it learns from the training data:
model.fit(train_images , train_labels , epochs = 10)

# Evaluate Accuracy
test_loss , test_acc = model.evaluate(test_images , test_labels , verbose = 2)
print("\n Test Accuracy :" , test_acc)

probability_model=tf.keras.Sequential([model,tf.keras.layers.Softmax()])
predictions = probability_model.predict(test_images)
 
# Let's take a look at the first prediction:
predictions[0]

# You can see which label has the highest confidence value:
print(np.argmax(predictions[0]))
print(test_labels[0])

